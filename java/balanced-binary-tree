/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    /*public boolean isBalanced(TreeNode root) {
        if(root == null){
            return true;
        }
        int left = depth(root.left);
        int right = depth(root.right);
 
        return left > right ? ((left - right) <= 1) : ((right - left) <= 1);
    }
    public int depth(TreeNode root){
        if(root == null){
            return 0;
        }
         
        if(root.left ==  null && root.right == null){
            return 1;
        }
        int left = depth(root.left);
        int right = depth(root.right);
        return left>right ? left+1 : right+1;
    }
    */
     
    public boolean isBalanced(TreeNode root) {
        if(root==null)
            return true;
        int left=treeDepth(root.left);
        int right=treeDepth(root.right);
        if(Math.abs(left-right)<=1)
           if (isBalanced(root.left) && isBalanced(root.right) )
            return true;
        return false;
    }
    private int treeDepth(TreeNode root){
        if(root==null)
            return 0;
        if(root.left==null&&root.right==null)
            return 1;
        return Math.max(treeDepth(root.left),treeDepth(root.right))+1;
    }
}
