
public static int numTrees(int n){
if(n<0){
return -1;
}
int[] dp=new int[n+1];
dp[0]=1;
dp[1]=1;
for(int i=2;i<=n;i++){
for(int j=0;j<i;j++){
dp[i]+=dp[j]*dp[i-j-1];
}
}
return dp[n];
}
我设dp[i]表示共有i个节点时，能产生的BST树的个数 n == 0 时，空树的个数必然为1，因此dp[0] = 1n == 1 时，只有1这个根节点，
数量也为1，因此dp[1] = 1n == 2时，有两种构造方法，如下图所示： 加载中...因此，dp[2] = dp[0] * dp[1] + dp[1] * dp[0] n == 3时，
构造方法如题目给的示例所示，dp[3] = dp[0] * dp[2] + dp[1] * dp[1] + dp[2] * dp[0] 同时，当根节点元素为 1, 2, 3, 4, 5, ..., i, ..., n时，
基于以下原则的BST树具有唯一性： 以i为根节点时，其左子树构成为[0,...,i-1],其右子树构成为[i+1,...,n]构成 因此，
dp[i] = sigma（dp[0...k] * dp[k+1...i]） 0 <= k < i - 1


public class Solution {
    public int numTrees(int n) {
//方式二：如果了解卡特兰数列的话，其实二叉搜索树的形态结构树就是一个卡特兰数列        
//直接套用公式计算 h(n)=C(2n,n)/(n+1)={2n(2n-1)(2n-2)...(n+2)}/{n(n-1)(n-2)...1}  组合数需要计算阶乘        
//可以采用递推公式  h(n)=(4n-2)/(n+1)*h(n-1) 来计算
        /*if(n==0)
            return 0;
        int res=1;
        for(int i=1;i<=n;i++){
            res = res * (4 * i - 2) / (i + 1);
        }
        return res;*/
         
        if(n<0){
           return -1;
        }
        int[] dp=new int[n+1];
        dp[0]=1;
        dp[1]=1;
        for(int i=2;i<=n;i++){
           for(int j=0;j<i;j++){
               dp[i]+=dp[j]*dp[i-j-1];
           }
        }
        return dp[n];
    }
     
     
}
