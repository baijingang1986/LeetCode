/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int sumNumbers(TreeNode root) {
        int sum =0;
        if(root == null){
            return 0;
        }
        return preorderSumNumbers(root, sum);
    }
    public int preorderSumNumbers(TreeNode root, int sum) {
    if (root == null)
        return 0;
    sum = sum * 10 + root.val;
    if (root.left == null && root.right == null) {
        return sum;
    }
    return preorderSumNumbers(root.left, sum) + preorderSumNumbers(root.right, sum);
}
}


/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
import java.util.*;
public class Solution {
     
    ArrayList<Integer> allNumber = new ArrayList<Integer>();
    void calAllNumber(TreeNode root)
    {
        if (root.left == null && root.right == null)
        {
            allNumber.add(root.val);
        }
        else
        {
            if (root.left != null)
            {
                root.left.val += root.val * 10;
                calAllNumber(root.left);
            }
            if (root.right != null)
            {
                root.right.val += root.val * 10;
                calAllNumber(root.right);
            }
        }
    }
     
    public int sumNumbers(TreeNode root) {
        int sum =0;
        if(root == null){
            return 0;
        }
        calAllNumber(root);
        for (int i = 0; i < allNumber.size(); ++i)
        {
            sum += allNumber.get(i);
        }
        return sum;
    }
}
