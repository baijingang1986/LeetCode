import java.util.*;
public class Solution {
    public ArrayList<ArrayList<Integer>> pathSum(TreeNode root, int sum) {
        ArrayList<ArrayList<Integer>> list = new ArrayList<ArrayList<Integer>>();
        LinkedList<TreeNode> q = new LinkedList<TreeNode>();
        Stack<TreeNode> stack = new Stack<TreeNode>();
         
        TreeNode t = root;
        /*while (t != null) {
            while (t != null) {
                q.add(t);
                if (t.right != null) {
                    stack.push(t.right);
                }
                t = t.left;
            }
            // 是叶子节点执行求和
            if (q.peekLast().left == null && q.peekLast().right == null) {
                int value = 0;
                ArrayList<Integer> nodeList = new ArrayList<Integer>();
                for (int i = 0; i < q.size(); i++) {
                    Integer temp = Integer.valueOf(q.get(i).val);
                    value += temp;
                    nodeList.add(temp);
                }
                if (value == sum) {
                    list.add(nodeList);
                }
            }
 
            if (!stack.empty()) {
                t = stack.pop();
                while (q.peekLast().right != t) {
                    q.pollLast();
                }
 
            }
 
        }
        */
 
        while(t!= null){
            while(t!= null){
                q.offer(t);
                if(t.right != null){
                    stack.push(t.right);
                }
                t=t.left;
            }
            if (q.peekLast().left == null && q.peekLast().right == null) {
                int value = 0;
                ArrayList<Integer> nodeList = new ArrayList<Integer>();
                for(int i = 0;i<q.size();i++){
                    Integer temp = Integer.valueOf(q.get(i).val);
                    value += q.get(i).val;
                    nodeList.add(q.get(i).val);
                }
                if(value == sum){
                    list.add(nodeList);
                }
            }
            if(!stack.empty()){
                t = stack.pop();
                while(q.peekLast().right != t){
                    q.pollLast();
                }
            }
        }
        return list;
    }
}
